# Function to calculate Euclidean distance
def euclidean_distance(p1, p2):
    return sum((p1[i] - p2[i])**2 for i in range(len(p1)))**0.5

# K-Means function
def k_means(data, k, max_iters=100):
    # Step 1: Randomly initialize centroids
    centroids = random.sample(data, k)
    
    for _ in range(max_iters):
        # Step 2: Assign points to the nearest centroid
        clusters = {i: [] for i in range(k)}
        for point in data:
            distances = [euclidean_distance(point, centroid) for centroid in centroids]
            cluster_idx = distances.index(min(distances))
            clusters[cluster_idx].append(point)
        
        # Step 3: Recalculate new centroids
        new_centroids = []
        for i in range(k):
            cluster_points = clusters[i]
            if cluster_points:  # Avoid division by zero
                new_centroids.append([sum(x)/len(x) for x in zip(*cluster_points)])
            else:
                new_centroids.append(centroids[i])  # Keep the old centroid if no points assigned
        
        # Stop if centroids don't change
        if new_centroids == centroids:
            break
        centroids = new_centroids
    
    return centroids, clusters

# Example usage
data_points = [[2, 3], [3, 4], [5, 8], [8, 8], [9, 10], [4, 5], [6, 7]]
k = 2
centroids, clusters = k_means(data_points, k)
print("Final Centroids:", centroids)
print("Clusters:", clusters)
